name: 'Pull Request - Merge'

on:
  workflow_call:
    inputs:
      projectType:
        description: "One or more Project Types to Bump the Version for: npm, dotnet"
        required: false
        type: string
    secrets:
      token:
        description: "A Personal Access Token (PAT) to be used for Git Credentials"
        required: true

defaults:
  run:
    shell: bash

jobs:
  bump-version-tag:
    name: 'Bump Version and Tag'
    if: ${{ github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'version:major') || contains(github.event.pull_request.labels.*.name, 'version:minor') || contains(github.event.pull_request.labels.*.name, 'version:patch')) }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Merge Branch"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.token }}
          fetch-depth: 0
      
      - name: "Get Previous Tag"
        id: previousTag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0
      
      - name: "Get Next Versions"
        id: nextVersions
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.previousTag.outputs.tag }}
      
      - name: "Determine New Version"
        id: newVersion
        run: |
          if [[ "${{ github.event.pull_request.labels.*.name }}" =~ "version:major" ]] then
            echo "version=${{ steps.nextVersions.outputs.major }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.labels.*.name }}" =~ "version:minor" ]] then
            echo "version=${{ steps.nextVersions.outputs.minor }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.labels.*.name }}" =~ "version:patch" ]] then
            echo "version=${{ steps.nextVersions.outputs.patch }}" >> $GITHUB_OUTPUT
          fi
      
      - name: "Update NPM Version"
        if: ${{ contains(inputs.projectType, 'npm') }}
        run: |
          npm config set allow-same-version true
          npm config set commit-hooks false
          npm config set git-tag-version false
          npm --no-git-tag-version version ${{ steps.newVersion.outputs.version }}
      
      - name: "Update DotNet Version"
        if: ${{ contains(inputs.projectType, 'dotnet') }}
        run: |
          if [[ -d "./Properties" ]] && [[ -f "./Properties/AssemblyInfo.cs" ]] then
            sed -i "s/${{ steps.previousTag.outputs.tag }}/${{ steps.newVersion.outputs.version }}/g" ./Properties/AssemblyInfo.cs
          else
            find . -name "*.csproj" -exec sed -i "s/<Version>${{ steps.previousTag.outputs.tag }}<\/Version>/<Version>${{ steps.newVersion.outputs.version }}<\/Version>/g" {} +
          fi
      
      - name: "Verify Changed Files"
        id: changedFiles
        uses: tj-actions/verify-changed-files@v14
        with:
          files: |
            **/*.json
            **/*.cs
            **/*.csproj
      
      - name: "Add, Commit and Push Changes"
        if: ${{ steps.changedFiles.outputs.files_changed == true }}
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
      
      - name: "Tag and Push"
        run: |
          git tag ${{ steps.newVersion.outputs.version }}
          git push origin ${{ steps.newVersion.outputs.version }}